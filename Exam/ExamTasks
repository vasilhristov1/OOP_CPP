Task 1:
Не е позволено използването на STL.

Спазвайте принципите на ООП. Придържайте се към добрите практики за писане на код.

Number
Напишете клас Number, който ще репрезентира цяло число. Напишете методи за достъп и промяна на цялото число. Предефинирайте операторите за сравнение ==, !=, > и < Напишете метод, който принтира цялото число на конзолата.

FloatNumber
Напишете клас FloatNumber, който ще репрезентира дробно число. Нека FloatNumber наследява Number и има допълнителна член данна, която да съхранява дробната част на числото. Пример 12.420 има 12 цяла част и 42 дробна част. Напишете методи за достъп и промяна на дробната част на числото. Предефинирайте операторите за сравнение ==, !=, > и < (При сравнение на FloatNumber не забравяйте да сравнявате и цялата част от числото) Напишете метод, който принтира дробното число на конзолата.

Task 2:
Не е позволено използването на STL.

Спазвайте принципите на ООП. Придържайте се към добрите практики за писане на код.

IdObject
Даден е клас IdObject, който ще пази даден обект (който може да бъде от произволен тип) заедно с някакъв идентификационен номер (цяло, неотрицателно число).

Създайте подходящ конструктор с параметри, както и подходящи методи за достъп до член-данните на класа. Стойностите на IdObject се задават само при създаването на обекта.

Предефинирайте операторите за сравнение == и != - два IdObject са равни, когато обектите, които пазят, както и идентификационните им номера, са равни.

Предефинирайте операторите за сравнение > и < - тук сравнението се извършва само на база на идентификационните номера.

IdObjectContainer
Даден е клас IdObjectContainer, който ще пази неограничен (до колкото стига паметта) брой инстанции от IdObject.

Създайте метод за добавяне на нов IdObject обект към колекцията. Създайте метод, който връща броя обекти в колекцията. Предефинирайте оператора [], който да връща обекта, съответстващ на даден индекс. Ако индекса е невалиден, да се хвърли изключение out_of_range. Предефинирайте оператора ==. Два обекта от тип IdObjectContainer са равни, когато имат равен брой елементи и всичките елементи на единия контейнер са елементи и на другия контейнер. Създайте метод, който връща броя на различните елементи в колекцията. Един обект е "различен", когато не е равен на всички останали елементи от колекцията.

Task 3:
Позволено е използването на STL.
Спазвайте принципите на ООП. Придържайте се към добрите практики за писане на код.
В задачата по-долу, всички описани мерки са дробни числа.

Напишете клас Drink, описващ напитка, със следните характеристики:
име (низ);
цена (дробно число);
количество (дробно число);
методи, връщащи стойностите на член-данните на класа;
метод, връщащ низ, който съдържа цялата информация за напитката

Напишете клас Food, описващ храна, със следните характеристики:
име (низ);
цена (дробно число);
калории (цяло число);
методи, връщащи стойностите на член-данните на класа;
метод, връщащ низ, който съдържа цялата информация за напитката

Напишете клас Shop, със следните характеристики:
съдържа в себе си множество (произволно много) от горедефинираните храни и напитки;
метод за добавяне на нова напитка към колекцията;
метод за добавяне на нова храна към колекцията;
метод, който връща обект по подаден индекс;
метод, който принтира на конзолата информацията за всички храни и напитки в магазина.
